@isTest
public class TestUpdateClassStudents {
    @isTest static void testMain(){
        List<Class__c> classes = new List<Class__c>();
        List<Student__c> students = new List<Student__c>();

        for(Integer i=0;i<2;i++){
            Class__c cl = new Class__c(Name='test'+i,MaxSize__c=10,Custom_Status__c='New',MyCount__c=0);
            classes.add(cl);
        }
		insert classes;
        for(Integer i=0;i<10;i++){
			String gender = math.mod(i,2) == 0 ? 'Female':'Male';
            Student__c stud = new Student__c(First_Name__c='test',Last_Name__c='stud'+i,
                                             Sex__c=gender,Married__c='No');
            if(math.mod(i,2) == 0){
                stud.Class__c = classes[math.mod(i,2)].Id;
            }
            else{
                stud.Class__c = classes[math.mod(i,2)].Id;
            }
            
			students.add(stud);            
        }        
        
        insert students;

        List<Class__c> classesAfterStudIns = [SELECT Id,Custom_Status__c FROM Class__c WHERE Name Like 'test%']; 
    	classesAfterStudIns[0].Custom_Status__c = 'Reset';
        classesAfterStudIns[1].Custom_Status__c = 'Open';
        System.debug(classesAfterStudIns[0].Students__r.size());
        System.debug(classesAfterStudIns[1].Students__r.size());
        
        Test.startTest();
        	update classesAfterStudIns;
        Test.stopTest();
        
        List<Class__c> classesAfterUpdation = [SELECT Id,(SELECT Name FROM Students__r) FROM Class__c WHERE Name Like 'test%'];
    	
        System.assertEquals(0, classesAfterUpdation[0].Students__r.size());
        System.assertEquals(5, classesAfterUpdation[1].Students__r.size());
    }
}